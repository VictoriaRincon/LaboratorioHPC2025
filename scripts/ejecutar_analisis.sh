#!/bin/bash

echo "=== AN√ÅLISIS MASIVO DE M√ÅQUINA DE ESTADOS ==="
echo "Procesamiento optimizado con an√°lisis de transiciones"
echo ""

# Crear directorio de resultados si no existe
mkdir -p resultados

echo "Opciones de an√°lisis:"
echo "1. Prueba r√°pida (1,000 combinaciones) - <1 segundo"
echo "2. An√°lisis peque√±o (10,000 combinaciones) - <1 segundo"  
echo "3. An√°lisis mediano (100,000 combinaciones) - <1 segundo"
echo "4. An√°lisis grande (1,000,000 combinaciones) - ~4 segundos"
echo "5. An√°lisis por lotes personalizado"
echo "6. An√°lisis completo (16,777,216 combinaciones) - ~1 minuto"
echo "7. An√°lisis completo MPI (16,777,216 combinaciones) - ~15-30 segundos"
echo ""

read -p "Selecciona una opci√≥n (1-7): " opcion

case $opcion in
    1)
        echo ""
        echo "üöÄ INICIANDO AN√ÅLISIS R√ÅPIDO"
        echo "Combinaciones: 1,000"
        echo "Tiempo estimado: <1 segundo"
        echo ""
        tiempo_inicio=$(date +%s)
        echo "1000" | ./demo_analisis_con_transiciones
        tiempo_fin=$(date +%s)
        duracion=$((tiempo_fin - tiempo_inicio))
        echo ""
        echo "‚úÖ An√°lisis completado en $duracion segundos"
        mv resultados_demo.csv resultados/analisis_1k_$(date +%Y%m%d_%H%M%S).csv
        ;;
        
    2)
        echo ""
        echo "üöÄ INICIANDO AN√ÅLISIS PEQUE√ëO"
        echo "Combinaciones: 10,000"
        echo "Tiempo estimado: <1 segundo"
        echo ""
        tiempo_inicio=$(date +%s)
        echo "10000" | ./demo_analisis_con_transiciones
        tiempo_fin=$(date +%s)
        duracion=$((tiempo_fin - tiempo_inicio))
        echo ""
        echo "‚úÖ An√°lisis completado en $duracion segundos ($((duracion/60))m ${duracion%60}s)"
        mv resultados_demo.csv resultados/analisis_10k_$(date +%Y%m%d_%H%M%S).csv
        ;;
        
    3)
        echo ""
        echo "üöÄ INICIANDO AN√ÅLISIS MEDIANO"
        echo "Combinaciones: 100,000"
        echo "Tiempo estimado: <1 segundo"
        echo ""
        tiempo_inicio=$(date +%s)
        echo "100000" | ./demo_analisis_con_transiciones
        tiempo_fin=$(date +%s)
        duracion=$((tiempo_fin - tiempo_inicio))
        echo ""
        echo "‚úÖ An√°lisis completado en $duracion segundos ($((duracion/60))m ${duracion%60}s)"
        mv resultados_demo.csv resultados/analisis_100k_$(date +%Y%m%d_%H%M%S).csv
        ;;
        
    4)
        echo ""
        echo "üöÄ INICIANDO AN√ÅLISIS GRANDE"
        echo "Combinaciones: 1,000,000"
        echo "Tiempo estimado: ~4 segundos"
        echo ""
        read -p "¬øContinuar? (s/N): " confirmar
        if [ "$confirmar" = "s" ] || [ "$confirmar" = "S" ]; then
            tiempo_inicio=$(date +%s)
            echo "1000000" | ./demo_analisis_con_transiciones
            tiempo_fin=$(date +%s)
            duracion=$((tiempo_fin - tiempo_inicio))
            echo ""
            echo "‚úÖ An√°lisis completado en $duracion segundos ($((duracion/3600))h $((duracion%3600/60))m)"
            mv resultados_demo.csv resultados/analisis_1M_$(date +%Y%m%d_%H%M%S).csv
        else
            echo "An√°lisis cancelado"
        fi
        ;;
        
    5)
        echo ""
        echo "üîß CONFIGURACI√ìN PERSONALIZADA"
        read -p "N√∫mero de combinaciones: " num_combinaciones
        read -p "N√∫mero de lotes (para dividir el trabajo): " num_lotes
        
        chunk_size=$((num_combinaciones / num_lotes))
        echo ""
        echo "Configuraci√≥n:"
        echo "- Total de combinaciones: $num_combinaciones"
        echo "- N√∫mero de lotes: $num_lotes"  
        echo "- Combinaciones por lote: $chunk_size"
        echo ""
        
        tiempo_inicio_total=$(date +%s)
        
        for ((i=0; i<$num_lotes; i++)); do
            start=$((i * chunk_size))
            if [ $i -eq $((num_lotes - 1)) ]; then
                # √öltimo lote incluye el resto
                current_chunk=$((num_combinaciones - start))
            else
                current_chunk=$chunk_size
            fi
            
            echo "üì¶ LOTE $((i+1))/$num_lotes - Procesando $current_chunk combinaciones"
            tiempo_lote_inicio=$(date +%s)
            
            echo "$current_chunk" | ./demo_analisis_con_transiciones
            
            tiempo_lote_fin=$(date +%s)
            duracion_lote=$((tiempo_lote_fin - tiempo_lote_inicio))
            
            mv resultados_demo.csv resultados/lote_${i}_$(date +%Y%m%d_%H%M%S).csv
            
            echo "‚úÖ Lote $((i+1)) completado en $duracion_lote segundos"
            echo ""
        done
        
        tiempo_fin_total=$(date +%s)
        duracion_total=$((tiempo_fin_total - tiempo_inicio_total))
        echo "üéâ TODOS LOS LOTES COMPLETADOS"
        echo "Tiempo total: $duracion_total segundos ($((duracion_total/3600))h $((duracion_total%3600/60))m)"
        ;;
        
    6)
        echo ""
        echo "‚ö†Ô∏è  AN√ÅLISIS COMPLETO EXTREMO"
        echo "Combinaciones: 16,777,216"
        echo "Tiempo estimado: ~1 minuto"
        echo ""
        read -p "¬øEst√°s COMPLETAMENTE seguro? (escribir 'CONFIRMO'): " confirm
        
        if [ "$confirm" = "CONFIRMO" ]; then
            echo ""
            echo "üöÄ INICIANDO AN√ÅLISIS COMPLETO..."
            echo "NOTA: An√°lisis r√°pido (~1 minuto), se puede interrumpir con Ctrl+C"
            echo ""
            
            # Ejecutar en background con log
            nohup bash -c '
                tiempo_inicio=$(date +%s)
                echo "16777216" | ./demo_analisis_con_transiciones
                tiempo_fin=$(date +%s)
                duracion=$((tiempo_fin - tiempo_inicio))
                echo ""
                echo "AN√ÅLISIS COMPLETO FINALIZADO"
                echo "Tiempo total: $duracion segundos ($((duracion/86400))d $((duracion%86400/3600))h)"
                mv resultados_demo.csv resultados/analisis_completo_$(date +%Y%m%d_%H%M%S).csv
            ' > resultados/analisis_completo.log 2>&1 &
            
            pid=$!
            echo "Proceso iniciado en background con PID: $pid"
            echo ""
            echo "Para monitorear progreso:"
            echo "  tail -f resultados/analisis_completo.log"
            echo ""
            echo "Para detener el proceso:"
            echo "  kill $pid"
        else
            echo "An√°lisis cancelado"
        fi
        ;;
        
    7)
        echo ""
        echo "‚ö° AN√ÅLISIS COMPLETO MPI EXTREMO"
        echo "Combinaciones: 16,777,216"
        echo "Versi√≥n paralelizada con Message Passing Interface"
        echo "Tiempo estimado: ~15-30 segundos (dependiendo del n√∫mero de procesos)"
        echo ""
        
        # Verificar si MPI est√° disponible
        if ! command -v mpirun &> /dev/null; then
            echo "‚ùå ERROR: MPI no est√° instalado"
            echo "Para instalar en macOS: brew install mpich (o open-mpi)"
            echo "Para instalar en Ubuntu: sudo apt-get install libmpich-dev (o openmpi-bin openmpi-dev)"
            exit 1
        fi
        
        if ! command -v mpicxx &> /dev/null; then
            echo "‚ùå ERROR: Compilador MPI (mpicxx) no est√° disponible"
            exit 1
        fi
        
        # Detectar n√∫mero de CPUs disponibles
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            num_cpus=$(sysctl -n hw.ncpu)
        else
            # Linux
            num_cpus=$(nproc)
        fi
        
        echo "‚úÖ MPI detectado correctamente"
        echo "CPUs detectadas: $num_cpus"
        # Usar m√°ximo 4 procesos para evitar problemas de memoria
        procesos_recomendados=$((num_cpus > 4 ? 4 : num_cpus))
        echo "Procesos recomendados: $procesos_recomendados (m√°ximo 4 para evitar problemas de memoria)"
        echo ""
        
        read -p "N√∫mero de procesos MPI a usar [$procesos_recomendados]: " num_procesos
        num_procesos=${num_procesos:-$procesos_recomendados}
        
        # Verificar si vale la pena usar MPI
        if [ $num_procesos -le 1 ]; then
            echo ""
            echo "‚ö†Ô∏è  ADVERTENCIA: Con 1 proceso, MPI ser√° m√°s lento que la versi√≥n secuencial"
            echo "Se recomienda usar al menos 2 procesos para obtener beneficios de MPI"
            echo ""
            read -p "¬øDeseas usar la versi√≥n secuencial (opci√≥n 6) en su lugar? (S/n): " usar_secuencial
            if [ "$usar_secuencial" != "n" ] && [ "$usar_secuencial" != "N" ]; then
                echo ""
                echo "üöÄ EJECUTANDO VERSI√ìN SECUENCIAL..."
                tiempo_inicio=$(date +%s)
                echo "16777216" | ./demo_analisis_con_transiciones
                tiempo_fin=$(date +%s)
                duracion=$((tiempo_fin - tiempo_inicio))
                echo ""
                echo "‚úÖ An√°lisis secuencial completado en $duracion segundos"
                mv resultados_demo.csv resultados/analisis_secuencial_$(date +%Y%m%d_%H%M%S).csv
                exit 0
            fi
        fi
        
        echo ""
        read -p "¬øEst√°s COMPLETAMENTE seguro? (escribir 'CONFIRMO'): " confirm
        
        if [ "$confirm" = "CONFIRMO" ]; then
            # Compilar versi√≥n MPI si no existe o est√° desactualizada
            if [ ! -f demo_analisis_con_transiciones_mpi ] || [ src/demo_analisis_con_transiciones_mpi.cpp -nt demo_analisis_con_transiciones_mpi ]; then
                echo ""
                echo "üî® Compilando versi√≥n MPI optimizada..."
                mpicxx -std=c++17 -Wall -Wextra -Iinclude -O3 -march=native \
                       -DNDEBUG -ffast-math \
                       src/demo_analisis_con_transiciones_mpi.cpp \
                       src/escenario.cpp \
                       src/calculador_costos.cpp \
                       -o demo_analisis_con_transiciones_mpi
                
                if [ $? -ne 0 ]; then
                    echo "‚ùå Error en la compilaci√≥n MPI"
                    exit 1
                fi
                echo "‚úÖ Compilaci√≥n MPI optimizada exitosa"
            fi
            
            echo ""
            echo "üöÄ INICIANDO AN√ÅLISIS COMPLETO MPI..."
            echo "Procesos MPI: $num_procesos"
            
            # Calcular distribuci√≥n √≥ptima de trabajo
            combinaciones_totales=16777216
            combinaciones_por_proceso=$((combinaciones_totales / num_procesos))
            resto=$((combinaciones_totales % num_procesos))
            
            echo "Combinaciones por proceso: $combinaciones_por_proceso"
            if [ $resto -ne 0 ]; then
                echo "Combinaciones extras en √∫ltimo proceso: $resto"
            fi
            
            # Configurar variables de entorno para optimizar MPI
            export OMP_NUM_THREADS=1  # Evitar conflictos con OpenMP
            export MPI_BUFFER_SIZE=1024  # Buffer peque√±o para reducir latencia
            
            echo ""
            tiempo_inicio=$(date +%s)
            
            # Usar par√°metros optimizados para MPI
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS - usar configuraci√≥n simple para mejor compatibilidad
                echo "16777216" | mpirun -np $num_procesos ./demo_analisis_con_transiciones_mpi 2>/dev/null || \
                echo "16777216" | mpirun -np $num_procesos ./demo_analisis_con_transiciones_mpi
            else
                # Linux - usar configuraci√≥n optimizada
                echo "16777216" | mpirun -np $num_procesos --bind-to core --map-by core ./demo_analisis_con_transiciones_mpi
            fi
            
            tiempo_fin=$(date +%s)
            duracion=$((tiempo_fin - tiempo_inicio))
            
            echo ""
            echo "üéâ AN√ÅLISIS COMPLETO MPI FINALIZADO"
            echo "Tiempo total: $duracion segundos ($((duracion/60))m ${duracion%60}s)"
            
            # Calcular y mostrar speedup real
            if [ -f "tiempo_secuencial.txt" ]; then
                tiempo_secuencial=$(cat tiempo_secuencial.txt)
                speedup_real=$(echo "scale=2; $tiempo_secuencial / $duracion" | bc -l 2>/dev/null || echo "N/A")
                echo "Speedup real vs versi√≥n secuencial: ${speedup_real}x"
            else
                echo "Speedup te√≥rico estimado: ~${num_procesos}x"
                echo "NOTA: Ejecuta primero la opci√≥n 6 para obtener speedup real"
            fi
            
            mv resultados_demo.csv resultados/analisis_mpi_completo_$(date +%Y%m%d_%H%M%S).csv
        else
            echo "An√°lisis cancelado"
        fi
        ;;
        
    *)
        echo "Opci√≥n inv√°lida"
        exit 1
        ;;
esac

echo ""
echo "=== INFORMACI√ìN DE RESULTADOS ==="
echo "üìÅ Archivos guardados en: ./resultados/"
echo "üìä Formato CSV: CombinacionID,PatronEolica,CostoTotal,SolucionValida,HorasCriticas,Transiciones"
echo ""
echo "üìù Nueva columna 'Transiciones':"
echo "   - Vac√≠a: nunca se prendi√≥ la m√°quina"
echo "   - '0-23': prendida todo el tiempo"
echo "   - '2-5-8-15': prender h2, apagar h5, prender h8, apagar h15"
echo ""
echo "üîç Comandos √∫tiles para an√°lisis:"
echo "  # Ver mejores resultados:"
echo "  sort -t, -k3 -n resultados/archivo.csv | head -10"
echo ""
echo "  # Analizar patrones de transiciones:"
echo "  ./scripts/analizar_resultados.sh resultados/archivo.csv"
echo ""
